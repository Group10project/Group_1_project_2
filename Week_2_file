from sklearn.datasets import load_breast_cancer
import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB 
from sklearn.metrics import accuracy_score

"""THE WHOLE POINT IS TO PREDICT WHETHER A TUMOUR IS DANGEROUS[0] OR HARMLESS[1]. IT USES THE FACTS ABOUT EACH TUMOUR THEN GIVES A PREDCTION BASED ON IT
THEN WE WILL TEST TO SEE HOW ACCURATE IT IS VS THE ACTUAL DATA"""
data = load_breast_cancer()                       #This loads the breast cancer database

#DATABASER EXAMPLE
datatable = pd.DataFrame(data.data, columns=data.feature_names)
datatable['target'] = data.target
print(datatable.head)
#Time to organize the data

label_names = data['target_names']
labels = data['target']
feature_names = data['feature_names']
features = data['data']
#TESTING CELL
print(label_names)
print(labels[0])
print(feature_names[0])
print(features[0])
#Split our dataset into testing and training sets

train, test, train_labels, test_labels = train_test_split(features, labels, test_size = 0.33, random_state = 42)

#features is the input data, labels is the target output, random state allows split to be repeated whenever i run else it might turn random
#We will build and train the Naive Baynes Model

gnb = GaussianNB()
model = gnb.fit(train, train_labels)            #We have now trained out gnb model

predictions = gnb.predict(test)                  #Predict() is used to return array of predictions
print(predictions)

#Output will show 0s and 1s and predict the malignant vs benign values
#Now to evaluate the model

print(accuracy_score(test_labels, predictions))

#94% accuracy means our classify makes the correct prediction most if not all the time regardless of mali vs beli
